import { Markup, Telegraf, Context } from 'telegraf';
import dotenv from 'dotenv';
import supabase from './lib/supabase';
import { Database } from './types/database';
import axios from 'axios';
import * as xml2js from 'xml2js';
import { InputMediaPhoto } from 'telegraf/types';
import nodemailer from 'nodemailer';

dotenv.config();

const token = process.env.BOT_TOKEN;
const mode = process.env.MODE ?? 'production';

if (!token) throw new Error('BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω');

export const bot = new Telegraf(token);

type Product = Database['public']['Tables']['products']['Row'];

interface Session {
  stage?: 'awaiting_email';
  category?: 'merch' | 'gifts';
  index: number;
  products: Product[];
  message_id?: number;
  lastProductId?: number;
}

// –°–µ—Å—Å–∏–∏ —Ö—Ä–∞–Ω—è—Ç —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–æ–≤–∞—Ä—ã, –Ω–∞–≤–∏–≥–∞—Ü–∏—è)
const sessions = new Map<number, Session>();

let usersCache: any[] = [];
let tokenInfo: { access_token: string; expires_at: number } | null = null;

// === –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ –ë–î ===
async function getUserFromDB(telegramId: number) {
  const { data } = await supabase
    .from('telegram_users')
    .select('*')
    .eq('telegram_id', telegramId)
    .single();
  
  return data;
}

async function saveUserToDB(telegramId: number, userData: {
  email: string;
  ispring_user_id: string;
  first_name?: string;
  last_name?: string;
}) {
  const expiresAt = new Date();
  expiresAt.setDate(expiresAt.getDate() + 1); // –¥–Ω–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

  const { data, error } = await supabase
    .from('telegram_users')
    .upsert({
      telegram_id: telegramId,
      email: userData.email,
      ispring_user_id: userData.ispring_user_id,
      first_name: userData.first_name,
      last_name: userData.last_name,
      expires_at: expiresAt.toISOString(),
      updated_at: new Date().toISOString()
    }, {
      onConflict: 'telegram_id'
    })
    .select()
    .single();

  return { data, error };
}

async function isUserAuthorized(telegramId: number): Promise<boolean> {
  const user = await getUserFromDB(telegramId);
  
  if (!user) return false;
  
  const expiresAt = new Date(user.expires_at);
  const now = new Date();
    
  return now < expiresAt;
}

async function checkAuthorize(ctx: Context): Promise<boolean> {
  if (!ctx.from) {
    return false;
  }

  const user_id = ctx.from.id;
  const isAuthorized = await isUserAuthorized(user_id);
  
  if (!isAuthorized) {
    await fetchUsers();
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    sessions.set(user_id, { index: 0, products: [], stage: undefined });
    await ctx.reply(
      '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å:',
      Markup.inlineKeyboard([
        [Markup.button.callback('üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è', 'start_auth')]
      ])
    );
    return false;
  }
  return true;
}

// === –ü–æ–ª—É—á–µ–Ω–∏–µ access token (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ===
async function getAccessToken(): Promise<string> {
  const now = Math.floor(Date.now() / 1000);
  if (tokenInfo && tokenInfo.expires_at > now) return tokenInfo.access_token;

  const res = await axios.post('https://cse.ispringlearn.ru/api/v3/token', new URLSearchParams({
    client_id: '92e83f33-5572-11f0-8e7e-666906879adb',
    client_secret: 'zaUmPGeLH3LkN0Khi2CeZgKriJFS5EaC-u6TPppAHBg',
    grant_type: 'client_credentials'
  }), {
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      Accept: 'application/json'
    }
  });

  tokenInfo = {
    access_token: res.data.access_token,
    expires_at: now + 1800 - 60
  };
  return tokenInfo.access_token;
}

// === –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ===
async function fetchUsers(): Promise<void> {
  const accessToken = await getAccessToken();
  const res = await axios.get('https://api-learn.ispringlearn.ru/user/v2', {
    headers: { Authorization: accessToken }
  });

  const parsed = await xml2js.parseStringPromise(res.data, { explicitArray: false });
  const profiles = parsed.response?.userProfileV2;
  usersCache = Array.isArray(profiles) ? profiles : profiles ? [profiles] : [];  
}

// === –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ===
async function fetchUserPoints(userId: string): Promise<number | null> {
  const accessToken = await getAccessToken();
  const res = await axios.get('https://api-learn.ispringlearn.ru/gamification/points', {
    headers: { Authorization: accessToken },
    params: { userIds: userId }
  });

  const parsed = await xml2js.parseStringPromise(res.data, { explicitArray: false });
  const pointsStr = parsed.response?.userPointsInfo?.points;
  return pointsStr ? parseInt(pointsStr, 10) : null;
}

// === –°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ===
async function withdrawUserPoints(userId: string, amount: number, reason: string): Promise<boolean> {
  const accessToken = await getAccessToken();
  const xml = `<?xml version="1.0" encoding="UTF-8"?>\n<withdrawGamificationPoints>\n  <userId>${userId}</userId>\n  <amount>${amount}</amount>\n  <reason>${reason}</reason>\n</withdrawGamificationPoints>`;

  try {
    await axios.post('https://api-learn.ispringlearn.ru/gamification/points/withdraw', xml, {
      headers: {
        Authorization: accessToken,
        'Content-Type': 'application/xml',
        Accept: 'application/xml'
      }
    });
    return true;
  } catch (e) {
    return false;
  }
}

const transporter = nodemailer.createTransport({
  host: 'smtp.yandex.ru',
  port: 465, // –∏–ª–∏ 587
  secure: true, // true –¥–ª—è 465, false –¥–ª—è 587
  auth: {
    user: 'GiftsShopCSE@yandex.ru',
    pass: process.env.MAIL_PASSWORD,
  },
});

async function sendOrderToCRM(orderText: string) {
  await transporter.sendMail({
    from: '"Telegram Bot" <GiftsShopCSE@yandex.ru>',
    to: 'giftshop@cse.ru',
    subject: '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –∏–∑ Telegram-–±–æ—Ç–∞',
    text: `${orderText}`,
  });
}

// === /start ===
bot.start(async ctx => {
  const user_id = ctx.from.id;
  const sess = sessions.get(user_id);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  const isAuthorized = await isUserAuthorized(user_id);
  
  if (isAuthorized) {
    await ctx.sendChatAction('typing');
    if (sess && sess.message_id) {
      try {
        await ctx.deleteMessage(sess.message_id);
      } catch (e) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', e);
      }
    }
    const user = await getUserFromDB(user_id);    
    const points = await fetchUserPoints(user.ispring_user_id);
    await ctx.reply(
      `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.first_name} ${user.last_name}!\n\nüí∞ –£ –≤–∞—Å ${points} –±–∞–ª–ª–æ–≤\n\nüìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª`.trim(),
      Markup.inlineKeyboard([
        [Markup.button.callback('–ú–µ—Ä—á –∫–æ–º–ø–∞–Ω–∏–∏', 'merch'), Markup.button.callback('–ü–æ–¥–∞—Ä–∫–∏ –æ—Ç–¥–µ–ª–∞', 'gifts')]
      ])
    );
  } else {
    await ctx.sendChatAction('typing');
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    sessions.set(user_id, { index: 0, products: [], stage: undefined });
    await fetchUsers();    

    await ctx.reply(
      `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –ú–∞–≥–∞–∑–∏–Ω–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏ –ö–°–≠!\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è:`,
      Markup.inlineKeyboard([
        [Markup.button.callback('üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è', 'start_auth')]
      ])
    );
  }
});

// === –ù–∞—á–∞–ª–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ===
bot.action('start_auth', async ctx => {
  await ctx.answerCbQuery();
  await ctx.sendChatAction('typing');
  const user_id = ctx.from.id;
  let sess = sessions.get(user_id);
  
  if (!sess) {
    sess = { index: 0, products: [], stage: undefined };
    sessions.set(user_id, sess);
  }
  
  sess.stage = 'awaiting_email';
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ä–∞–±–æ—á—É—é –ø–æ—á—Ç—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:');
});

// === –ö–æ–º–∞–Ω–¥–∞ /account ===
bot.command('account', async ctx => {
  const sess = sessions.get(ctx.from.id);
  
  const user_id = ctx.from.id;
  const user = await getUserFromDB(user_id);
  
  if (!user) {
    await ctx.deleteMessage();
    if (sess && sess.message_id) {
      try {
        await ctx.deleteMessage(sess.message_id);
      } catch (e) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', e);
      }
    }
    await ctx.sendChatAction('typing');
    return ctx.reply('‚úñÔ∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.');
  }

  const points = await fetchUserPoints(user.ispring_user_id);
  const lines = [
    `üë§ ${user.first_name ?? ''} ${user.last_name ?? ''}`,
    `üìß Email: ${user.email ?? '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}`,
    `üí∞ –ë–∞–ª–ª—ã: ${points ?? '–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å'}`
  ];

  await ctx.deleteMessage();
  if (sess && sess.message_id) {
    try {
      await ctx.deleteMessage(sess.message_id);
    } catch (e) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', e);
    }
  }
  ctx.reply(lines.join('\n\n'), Markup.inlineKeyboard([
    [Markup.button.callback('‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∫—É–ø–∫–∞–º', 'return_to_products')],
  ]));
});

// === –ü–æ–ª—É—á–µ–Ω–∏–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
bot.on('text', async ctx => {
  const user_id = ctx.from.id;
  const sess = sessions.get(user_id);
  const text = ctx.message.text.trim();

  // === –í–≤–æ–¥ email ===
  if (sess?.stage === 'awaiting_email') {
    const email = text.toLowerCase();
    sess.stage = undefined;

    const matchedUser = usersCache.find(user => {
      const fields = user.fields?.field;
      const emailField = Array.isArray(fields)
        ? fields.find(f => f.name === 'EMAIL')
        : fields?.name === 'EMAIL' ? fields : null;
      return emailField?.value?.toLowerCase() === email;
    });

    if (matchedUser) {
      const fields = matchedUser.fields?.field;
      const firstName = Array.isArray(fields) ? fields.find(f => f.name === 'FIRST_NAME')?.value : '';
      const lastName = Array.isArray(fields) ? fields.find(f => f.name === 'LAST_NAME')?.value : '';
      const userId = matchedUser.userId;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
      await saveUserToDB(user_id, {
        email,
        ispring_user_id: userId,
        first_name: firstName,
        last_name: lastName
      });

      const points = await fetchUserPoints(userId);

      await ctx.reply(
        `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${firstName} ${lastName}!\n\nüí∞ –£ –≤–∞—Å ${points} –±–∞–ª–ª–æ–≤\n\nüìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª`.trim(),
        Markup.inlineKeyboard([
          [Markup.button.callback('–ú–µ—Ä—á –∫–æ–º–ø–∞–Ω–∏–∏', 'merch'), Markup.button.callback('–ü–æ–¥–∞—Ä–∫–∏ –æ—Ç–¥–µ–ª–∞', 'gifts')]
        ])
      );
    } else {
      await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      sess.stage = 'awaiting_email';
    }

    return;
  }

  // === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "üõí –ö–æ—Ä–∑–∏–Ω–∞" ===
  if (/^üõí –ö–æ—Ä–∑–∏–Ω–∞/.test(text)) {
    const sess = sessions.get(user_id);
    if (sess && sess.message_id) {
      try {
        await ctx.deleteMessage(sess.message_id);
      } catch (e) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', e);
      }
    }

    const { data } = await supabase
      .from('cart_items')
      .select('quantity, products(name), price')
      .eq('user_id', String(user_id));

    if (!data || !data.length) {
      return ctx.reply('üö´ –í –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤');
    }    

    const cartText = data.map((item: any, idx: number) =>
      `${idx + 1}. ${item.products.name} - ${item.quantity} —à—Ç.\n–°—Ç–æ–∏–º–æ—Å—Ç—å: ${item.price} –±–∞–ª–ª–æ–≤`
    ).join('\n');

    await ctx.reply(`üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n${cartText}`, Markup.inlineKeyboard([
      [Markup.button.callback('–ó–∞–∫–∞–∑–∞—Ç—å ‚úÖ', 'order')],
      [Markup.button.callback('üßπ –û—á–∏—Å—Ç–∏—Ç—å', 'clear_cart')]
    ]));
    return;
  }

  // === –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º ===
  console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${ctx.from.username || ctx.from.first_name}: ${text}`);
});

// --- –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ö–æ—Ä–∑–∏–Ω–∞ (n) ---
async function setCartKeyboard(ctx: any, user_id: string, notify: boolean = false) {
  const { data } = await supabase.from('cart_items').select('quantity').eq('user_id', user_id);
  const total = (data ?? []).reduce((sum, item) => sum + item.quantity, 0);

  if (!notify) {
    return;
  }

  await ctx.telegram.sendMessage(ctx.chat.id, `üõí –ö–æ—Ä–∑–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (${total})`, {
    reply_markup: {
      keyboard: [[{ text: `üõí –ö–æ—Ä–∑–∏–Ω–∞ (${total})` }]],
      resize_keyboard: true,
      one_time_keyboard: false
    }
  });
}

// --- –≤–æ–∑–≤—Ä–∞—Ç –∫ —Ç–æ–≤–∞—Ä–∞–º ---
bot.action('return_to_products', async ctx => {
  await ctx.answerCbQuery('');
  await ctx.sendChatAction('typing');
  await ctx.deleteMessage();
  await ctx.reply('üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª', Markup.inlineKeyboard([
    [Markup.button.callback('–ú–µ—Ä—á –∫–æ–º–ø–∞–Ω–∏–∏', 'merch'), Markup.button.callback('–ü–æ–¥–∞—Ä–∫–∏ –æ—Ç–¥–µ–ª–∞', 'gifts')]
  ]))
});

// --- –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
bot.action('merch', async ctx => {
  await ctx.answerCbQuery('');
  await ctx.sendChatAction('typing');
  await ctx.deleteMessage();
  if (!(await checkAuthorize(ctx))) return;

  const user_id = ctx.from.id;

  // –¢–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã (is_gift = false)
  const { data: products } = await supabase
    .from('products')
    .select('*')
    .eq('is_gift', false);

  if (!products || products.length === 0) {
    return ctx.reply('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤');
  }

  const availableProducts = products.filter(product => product.remains > 0);

  if (availableProducts.length === 0) {
    return ctx.reply('‚ùå –í—Å–µ —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å');
  }

  let sess = sessions.get(user_id);
  if (!sess) {
    sess = { index: 0, products: [] };
    sessions.set(user_id, sess);
  }

  sess.category = 'merch';
  sess.index = 0;
  sess.products = availableProducts;

  const firstProduct = availableProducts[0];
  const caption = `üìã ${firstProduct.name}
    üîç –†–∞–∑–º–µ—Ä: ${firstProduct.size ?? '‚Äî'}
    üí∞ –¶–µ–Ω–∞: ${firstProduct.price} –±–∞–ª–ª–æ–≤
    üì¶ –û—Å—Ç–∞—Ç–æ–∫: ${firstProduct.remains}`;

  const message = await ctx.replyWithPhoto(firstProduct.image_url ?? '', {
    caption,
    reply_markup: getProductKeyboard(firstProduct.id, 0, availableProducts.length, false),
  });

  sess.message_id = message.message_id;
});


bot.action('gifts', async ctx => {
  await ctx.answerCbQuery('');
  await ctx.sendChatAction('typing');
  await ctx.deleteMessage();
  if (!(await checkAuthorize(ctx))) return;

  const { data: gifts, error } = await supabase
    .from('products')
    .select('*')
    .gt('remains', 0) // –¢–æ–ª—å–∫–æ –ø–æ–¥–∞—Ä–∫–∏ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏
    .order('id')
    .eq('is_gift', true)

  if (error || !gifts || gifts.length === 0) {
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ –∏–ª–∏ –æ–Ω–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å üò¢');
    return;
  }

  const messageText = `üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞:\n\n` +
    gifts.map((gift, index) => `${index + 1}. ${gift.name} ‚Äî ${gift.price} –±–∞–ª–ª–æ–≤`).join('\n');

  const keyboard = gifts.map((gift, index) => [
    Markup.button.callback(`${index + 1} ‚Äî ${gift.price} –±–∞–ª–ª–æ–≤`, `select_gift_${gift.id}`)
  ]);

  keyboard.push([Markup.button.callback('–ù–∞–∑–∞–¥ ‚óÄÔ∏è', 'back')]);

  await ctx.reply(messageText, Markup.inlineKeyboard(keyboard));
});

bot.action(/select_gift_(\d+)/, async ctx => {
  
  await ctx.answerCbQuery('');
  await ctx.sendChatAction('typing');
  await ctx.deleteMessage();

  const user_id = String(ctx.from.id);
  const product_id = Number(ctx.match[1]);
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∞—Ä–∫–µ –∏–∑ products
  const { data: product } = await supabase
    .from('products')
    .select('remains, price, name, is_gift')
    .eq('id', product_id)
    .eq('is_gift', true)
    .single();

  if (!product?.remains) {
    return ctx.answerCbQuery('‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è', { show_alert: true });
  }

  const { data: cartItem } = await supabase
    .from('cart_items')
    .select('quantity, price')
    .eq('user_id', user_id)
    .eq('product_id', product_id)
    .single();

  const currentQuantity = cartItem?.quantity || 0;

  if (currentQuantity >= product.remains) {
    return ctx.answerCbQuery('‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è', { show_alert: true });
  }

  if (cartItem) {
    const newQuantity = currentQuantity + 1;
    await supabase
      .from('cart_items')
      .update({ quantity: newQuantity, price: newQuantity * product.price })
      .eq('user_id', user_id)
      .eq('product_id', product_id);
  } else {
    const { error } = await supabase
      .from('cart_items')
      .insert({ user_id, product_id, quantity: 1, price: product.price });

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É:', error.message);
      return ctx.answerCbQuery('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –≤ –∫–æ—Ä–∑–∏–Ω—É', { show_alert: true });
    }
  }

  await ctx.answerCbQuery(`‚úÖ ${product.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É`);
  await setCartKeyboard(ctx, user_id, true);
});


// --- –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –ø–æ–¥ —Ç–æ–≤–∞—Ä–æ–º (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
function getProductKeyboard(productId: number, index: number, total: number, isInCart: boolean) {
  return Markup.inlineKeyboard([
    [
      Markup.button.callback('‚¨ÖÔ∏è', 'prev'),
      Markup.button.callback(`${index + 1}/${total}`, 'noop'),
      Markup.button.callback('‚û°Ô∏è', 'next')
    ],
    [isInCart
      ? Markup.button.callback('–£–¥–∞–ª–∏—Ç—å üóëÔ∏è', `remove_${productId}`)
      : Markup.button.callback('–í—ã–±—Ä–∞—Ç—å üéØ', `select_${productId}`)],
    [Markup.button.callback('–ù–∞–∑–∞–¥ ‚óÄÔ∏è', 'back')]
  ]).reply_markup;
}

// --- –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async function updateProductView(ctx: Context, sess: Session, forceInCart?: boolean) {
  const product = sess.products[sess.index];
  if (!product) {
    await ctx.reply('üìÅ –ù–∞–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑–º–µ–Ω–∏–ª—Å—è, –≤—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑:', Markup.inlineKeyboard([
      [Markup.button.callback('–ú–µ—Ä—á –∫–æ–º–ø–∞–Ω–∏–∏', 'merch'), Markup.button.callback('–ü–æ–¥–∞—Ä–∫–∏ –æ—Ç–¥–µ–ª–∞', 'gifts')]
    ]));
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –Ω–µ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–ø–¥–µ–π—Ç
  if (sess.lastProductId === product.id && !forceInCart) {
    return;
  }

  sess.lastProductId = product.id;

  const caption = `üìã ${product.name}\nüîç –†–∞–∑–º–µ—Ä: ${product.size}\nüí∞ –¶–µ–Ω–∞: ${product.price} –±–∞–ª–ª–æ–≤\nüì¶ –û—Å—Ç–∞—Ç–æ–∫: ${product.remains}`;
  if (!sess.message_id) return;

  const { data: cartItems } = await supabase
    .from('cart_items')
    .select('*')
    .eq('user_id', String(ctx.from?.id))
    .eq('product_id', product.id);

  const isInCart = forceInCart ?? !!(cartItems && cartItems.length);
  const media: InputMediaPhoto = {
    type: 'photo',
    media: product.image_url ?? '',
    caption
  };
  const reply_markup = getProductKeyboard(product.id, sess.index, sess.products.length, isInCart);

  try {
    await ctx.telegram.editMessageMedia(
      ctx.chat!.id,
      sess.message_id,
      undefined,
      media,
      { reply_markup }
    );
  } catch (err: any) {
    if (err?.description?.includes('message is not modified')) {
      // –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
      console.warn('‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è');
    } else {
      throw err;
    }
  }
}

// --- –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
bot.action(/prev|next|back/, async ctx => {
  await ctx.answerCbQuery('–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...');
  const sess = sessions.get(ctx.from.id);
  if (!sess) {
    ctx.deleteMessage();
    return ctx.reply('üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª', Markup.inlineKeyboard([
      [Markup.button.callback('–ú–µ—Ä—á –∫–æ–º–ø–∞–Ω–∏–∏', 'merch'), Markup.button.callback('–ü–æ–¥–∞—Ä–∫–∏ –æ—Ç–¥–µ–ª–∞', 'gifts')]
    ]));
  }

  if (ctx.match[0] === 'prev') sess.index = Math.max(0, sess.index - 1);
  if (ctx.match[0] === 'next') sess.index = Math.min(sess.products.length - 1, sess.index + 1);
  if (ctx.match[0] === 'back') {
    sess.message_id = undefined;
    await ctx.deleteMessage();
    return ctx.reply('üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª', Markup.inlineKeyboard([
      [Markup.button.callback('–ú–µ—Ä—á –∫–æ–º–ø–∞–Ω–∏–∏', 'merch'), Markup.button.callback('–ü–æ–¥–∞—Ä–∫–∏ –æ—Ç–¥–µ–ª–∞', 'gifts')]
    ]));
  }

  await updateProductView(ctx, sess);
});

// --- –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—Å—Ç–∞—Ç–∫–æ–≤ ---
bot.action(/select_(\d+)/, async ctx => {
  await ctx.answerCbQuery('');
  await ctx.sendChatAction('typing');
  const user_id = String(ctx.from.id);
  const product_id = Number(ctx.match[1]);
 
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
  const { data: product } = await supabase
    .from('products')
    .select('remains, price')
    .eq('id', product_id)
    .single();  
 
  if (!product?.remains) {
    await ctx.deleteMessage();
    return ctx.reply('‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å', Markup.inlineKeyboard([Markup.button.callback('‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∫—É–ø–∫–∞–º', 'return_to_products')]));
  }  
 
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ
  const { data: cartItem } = await supabase
    .from('cart_items')
    .select('quantity, price')
    .eq('user_id', user_id)
    .eq('product_id', product_id)
    .single();    
 
  const currentQuantity = cartItem?.quantity || 0;
  const currentPrice = cartItem?.price || 0;  
 
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä
  if (currentQuantity >= (product.remains || 0)) {
    return ctx.answerCbQuery('‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å', { show_alert: true });
  }
 
  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É  
  if (cartItem) {
    const newQuantity = currentQuantity + 1;
    await supabase
      .from('cart_items')
      .update({ quantity: newQuantity, price: newQuantity * product.price })
      .eq('user_id', user_id)
      .eq('product_id', product_id);
  } else {
    await supabase
      .from('cart_items')
      .insert({ user_id, product_id, quantity: 1, price: product.price });
  }
 
  await updateProductView(ctx, sessions.get(ctx.from.id)!, true);
  await setCartKeyboard(ctx, user_id, true);
 });

// --- —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
bot.action(/remove_(\d+)/, async ctx => {
  await ctx.answerCbQuery('');
  await ctx.sendChatAction('typing');
  const user_id = String(ctx.from.id);
  const product_id = Number(ctx.match[1]);

  await supabase.from('cart_items').delete()
    .eq('user_id', user_id)
    .eq('product_id', product_id);

  await updateProductView(ctx, sessions.get(ctx.from.id)!, false);
  await setCartKeyboard(ctx, user_id, true);
});

// --- –æ—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
bot.action('clear_cart', async ctx => {
  await ctx.answerCbQuery('');
  await ctx.sendChatAction('typing');
  const user_id = String(ctx.from.id);
  await supabase.from('cart_items').delete().eq('user_id', user_id);

  await setCartKeyboard(ctx, user_id, true);
  await ctx.answerCbQuery('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞');
  await ctx.editMessageText('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞ ‚úÖ');

  await ctx.reply('üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª', Markup.inlineKeyboard([
    [Markup.button.callback('–ú–µ—Ä—á –∫–æ–º–ø–∞–Ω–∏–∏', 'merch'), Markup.button.callback('–ü–æ–¥–∞—Ä–∫–∏ –æ—Ç–¥–µ–ª–∞', 'gifts')]
  ]));
});

// --- –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ---
bot.action('order', async ctx => {
  await ctx.answerCbQuery('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–∞...');
  await ctx.sendChatAction('typing');

  const user_id = String(ctx.from.id);
  const user = await getUserFromDB(ctx.from.id);

  if (!user) {
    return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è: /start');
  }

  const { data, error } = await supabase
    .from('cart_items')
    .select('quantity, product_id, products(name, price, remains), price')
    .eq('user_id', user_id);

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã:', error);
    return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }

  if (!data || data.length === 0) {
    return ctx.reply('üö´ –í –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤');
  }

  // –¢–∏–ø –æ—Ç–≤–µ—Ç–∞ –æ—Ç Supabase
  type RawCartItem = {
    quantity: number;
    product_id: number;
    products: {
      name: string;
      price: number;
      remains: number;
    }[];
    price: number;
  };

  // –¶–µ–ª–µ–≤–æ–π —Ç–∏–ø, —Å –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å
  type CartItemWithProduct = {
    quantity: number;
    product_id: number;
    product: {
      name: string;
      price: number;
      remains: number;
    } | null;
    price: number;
  };

  const rawCartItems = data as RawCartItem[];

  const cartItems: CartItemWithProduct[] = rawCartItems.map(item => ({
    quantity: item.quantity,
    product_id: item.product_id,
    product: Array.isArray(item.products) ? item.products[0] : item.products ?? null,
    price: item.price,
  }));  
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  const invalidItems = cartItems.filter(item => !item.product);
  if (invalidItems.length > 0) {
    return ctx.reply('–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã —É—Å—Ç–∞—Ä–µ–ª–∏ –∏–ª–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã. –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ—Ä–∑–∏–Ω—É.');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
  const insufficientStock = cartItems.filter(item =>
    item.product && item.quantity > item.product.remains
  );

  if (insufficientStock.length > 0) {
    const stockErrors = insufficientStock.map(item =>
      `${item.product!.name}: –Ω—É–∂–Ω–æ ${item.quantity}, –≤ –Ω–∞–ª–∏—á–∏–∏ ${item.product!.remains}`
    ).join('\n');

    return ctx.reply(`‚ùå –í—ã –∑–∞–∫–∞–∑–∞–ª–∏ –±–æ–ª—å—à–µ, —á–µ–º –æ—Å—Ç–∞–ª–æ—Å—å:\n${stockErrors}`);
  }

  const totalCost = cartItems.reduce((sum, item) =>
    sum + item.quantity * (item.product!.price), 0
  );

  const userPoints = await fetchUserPoints(user.ispring_user_id);

  if (!userPoints || userPoints < totalCost) {
    return ctx.reply(`‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞. –ù—É–∂–Ω–æ ${totalCost}, —É –≤–∞—Å ${userPoints ?? 0}.`, Markup.inlineKeyboard([
      [Markup.button.callback('‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∫—É–ø–∫–∞–º', 'return_to_products')],
    ]));
  }

  try {
    // –°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤
    const success = await withdrawUserPoints(user.ispring_user_id, totalCost, '–°–ø–∏—Å–∞–Ω–∏–µ –∑–∞ –∑–∞–∫–∞–∑ –≤ Telegram-–±–æ—Ç–µ');

    if (!success) {
      return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
    for (const item of cartItems) {
      const newRemains = item.product!.remains - item.quantity;

      const { error } = await supabase
        .from('products')
        .update({ remains: newRemains })
        .eq('id', item.product_id);

      if (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–∞ ${item.product!.name}:`, error);
      }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω—É
    const orderContain = cartItems.map((item, index) =>
      `${index + 1}. ${item.product!.name} - ${item.quantity} —à—Ç.\n–°—Ç–æ–∏–º–æ—Å—Ç—å: ${item.price} –±–∞–ª–ª–æ–≤\n`
    ).join('\n');

    const orderText = `üõç –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!!!\n\nüë® ${user.first_name} ${user.last_name}\nüì® ${user.email}\nüåç @${ctx.from.username}\n\nüìã –ó–∞–∫–∞–∑:\n${orderContain}\n\nüí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${totalCost} –±–∞–ª–ª–æ–≤`

    await ctx.telegram.sendMessage(Number(process.env.ADMIN_ID!), orderText);

    await sendOrderToCRM(orderText)

    // –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
    await supabase.from('cart_items').delete().eq('user_id', user_id);

    await ctx.reply(`‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ ${totalCost} –±–∞–ª–ª–æ–≤ —Å–ø–∏—Å–∞–Ω–æ.\n–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å ${userPoints - totalCost} –±–∞–ª–ª–æ–≤.\n\n–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –í–∞–º –ø–æ—Å—Ç—É–ø–∏—Ç –ø–∏—Å—å–º–æ –Ω–∞ —Ä–∞–±–æ—á—É—é –ø–æ—á—Ç—É.`);
    await setCartKeyboard(ctx, user_id, true);

    await ctx.reply('üìÅ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –ø–æ–∫—É–ø–∫–∏, –≤—ã–±—Ä–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª', Markup.inlineKeyboard([
      [Markup.button.callback('–ú–µ—Ä—á –∫–æ–º–ø–∞–Ω–∏–∏', 'merch'), Markup.button.callback('–ü–æ–¥–∞—Ä–∫–∏ –æ—Ç–¥–µ–ª–∞', 'gifts')]
    ]));
    
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', err);
    return ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é ===
(async () => {
  await bot.telegram.setMyCommands([
    { command: 'start', description: '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' },
    { command: 'account', description: '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç' }
  ]);

  // === –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ ===
  if (mode === 'local') {
    bot.launch();
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling');

    process.once('SIGINT', () => bot.stop('SIGINT'));
    process.once('SIGTERM', () => bot.stop('SIGTERM'));
  }
})();
