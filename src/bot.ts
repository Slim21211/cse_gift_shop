import { Markup, Telegraf, Context } from 'telegraf';
import dotenv from 'dotenv';
import supabase from './lib/supabase';
import { Database } from './types/database';
import axios from 'axios';
import * as xml2js from 'xml2js';
import { writeFileSync, readFileSync, existsSync } from 'fs';
import path from 'path';

dotenv.config();

const token = process.env.BOT_TOKEN;
const mode = process.env.MODE ?? 'production';

if (!token) throw new Error('BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω');

export const bot = new Telegraf(token);

type Product = Database['public']['Tables']['products']['Row'];

interface Session {
  stage?: 'awaiting_email';
  category?: 'merch' | 'plush';
  index: number;
  products: Product[];
  message_id?: number;
  email?: string;
  userId?: string;
  firstName?: string;
  lastName?: string;
}

const sessions = new Map<number, Session>();

let usersCache: any[] = [];
let tokenInfo: { access_token: string; expires_at: number } | null = null;

const AUTH_FILE = path.resolve(__dirname, 'auth_store.json');
let authStore: Record<string, number> = {};
if (existsSync(AUTH_FILE)) {
  authStore = JSON.parse(readFileSync(AUTH_FILE, 'utf-8'));
}

function saveAuthStore() {
  writeFileSync(AUTH_FILE, JSON.stringify(authStore));
}

function isAuthorized(user_id: number): boolean {
  const expiresAt = authStore[user_id];
  return typeof expiresAt === 'number' && Date.now() < expiresAt;
}

function setAuthorized(user_id: number): void {
  const month = 1000 * 60 * 60 * 24 * 30;
  authStore[user_id] = Date.now() + month;
  saveAuthStore();
}

async function checkAuthorize(ctx: Context): Promise<boolean> {
  if (!ctx.from) {
    return false;
  }

  const user_id = ctx.from.id;
  if (!isAuthorized(user_id)) {
    await fetchUsers();    
    sessions.set(user_id, { index: 0, products: [], stage: undefined });
    await ctx.reply(
      '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å:',
      Markup.inlineKeyboard([
        [Markup.button.callback('üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è', 'start_auth')]
      ])
    );
    return false;
  }
  return true;
}

// === –ü–æ–ª—É—á–µ–Ω–∏–µ access token ===
async function getAccessToken(): Promise<string> {
  const now = Math.floor(Date.now() / 1000);
  if (tokenInfo && tokenInfo.expires_at > now) return tokenInfo.access_token;

  const res = await axios.post('https://cse.ispringlearn.ru/api/v3/token', new URLSearchParams({
    client_id: '92e83f33-5572-11f0-8e7e-666906879adb',
    client_secret: 'zaUmPGeLH3LkN0Khi2CeZgKriJFS5EaC-u6TPppAHBg',
    grant_type: 'client_credentials'
  }), {
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      Accept: 'application/json'
    }
  });

  tokenInfo = {
    access_token: res.data.access_token,
    expires_at: now + 1800 - 60
  };
  return tokenInfo.access_token;
}

// === –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
async function fetchUsers(): Promise<void> {
  const accessToken = await getAccessToken();
  const res = await axios.get('https://api-learn.ispringlearn.ru/user/v2', {
    headers: { Authorization: accessToken }
  });

  const parsed = await xml2js.parseStringPromise(res.data, { explicitArray: false });
  const profiles = parsed.response?.userProfileV2;
  usersCache = Array.isArray(profiles) ? profiles : profiles ? [profiles] : [];
}

// === –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
async function fetchUserPoints(userId: string): Promise<number | null> {
  const accessToken = await getAccessToken();
  const res = await axios.get('https://api-learn.ispringlearn.ru/gamification/points', {
    headers: { Authorization: accessToken },
    params: { userIds: userId }
  });

  const parsed = await xml2js.parseStringPromise(res.data, { explicitArray: false });
  const pointsStr = parsed.response?.userPointsInfo?.points;
  return pointsStr ? parseInt(pointsStr, 10) : null;
}

// === –°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
async function withdrawUserPoints(userId: string, amount: number, reason: string): Promise<boolean> {
  const accessToken = await getAccessToken();
  const xml = `<?xml version="1.0" encoding="UTF-8"?>\n<withdrawGamificationPoints>\n  <userId>${userId}</userId>\n  <amount>${amount}</amount>\n  <reason>${reason}</reason>\n</withdrawGamificationPoints>`;

  try {
    await axios.post('https://api-learn.ispringlearn.ru/gamification/points/withdraw', xml, {
      headers: {
        Authorization: accessToken,
        'Content-Type': 'application/xml',
        Accept: 'application/xml'
      }
    });
    return true;
  } catch (e) {
    return false;
  }
}

// === /start ===
bot.start(async ctx => {
  const user_id = ctx.from.id;  
    sessions.set(user_id, { index: 0, products: [], stage: undefined });

  await fetchUsers();

  await ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}!
–î–ª—è –Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å:`,
    Markup.inlineKeyboard([
      [Markup.button.callback('üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è', 'start_auth')]
    ])
  );
});

// === –ù–∞—á–∞–ª–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ===
bot.action('start_auth', async ctx => {
  const sess = sessions.get(ctx.from.id);  
  if (!sess) return;
  sess.stage = 'awaiting_email';
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:');
});

bot.command('account', async ctx => {
  const sess = sessions.get(ctx.from.id);
  if (!sess || !sess.userId) {
    return ctx.reply('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.');
  }

  const points = await fetchUserPoints(sess.userId);
  const lines = [
    `üë§ ${sess.firstName ?? ''} ${sess.lastName ?? ''}`,
    `üìß Email: ${sess.email ?? '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}`,
    `üÜî ID iSpring: ${sess.userId}`,
    `üí∞ –ë–∞–ª–ª—ã: ${points ?? '–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å'}`
  ];

  ctx.reply(lines.join('\n'));
});

// === –ü–æ–ª—É—á–µ–Ω–∏–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
bot.on('text', async ctx => {
  const user_id = ctx.from.id;
  const sess = sessions.get(user_id);
  const text = ctx.message.text.trim();

  // === –í–≤–æ–¥ email ===
  if (sess?.stage === 'awaiting_email') {
    const email = text.toLowerCase();
    sess.email = email;
    sess.stage = undefined;

    const matchedUser = usersCache.find(user => {
      const fields = user.fields?.field;
      const emailField = Array.isArray(fields)
        ? fields.find(f => f.name === 'EMAIL')
        : fields?.name === 'EMAIL' ? fields : null;
      return emailField?.value?.toLowerCase() === email;
    });

    if (matchedUser) {
      const fields = matchedUser.fields?.field;
      const firstName = Array.isArray(fields) ? fields.find(f => f.name === 'FIRST_NAME')?.value : '';
      const lastName = Array.isArray(fields) ? fields.find(f => f.name === 'LAST_NAME')?.value : '';
      const userId = matchedUser.userId;

      sess.email = email;
      sess.userId = userId;
      sess.firstName = firstName;
      sess.lastName = lastName;

      const points = await fetchUserPoints(userId);      

      await ctx.reply(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${firstName} ${lastName}`.trim());
      await ctx.reply(`–£ –≤–∞—Å ${points ?? 0} –±–∞–ª–ª–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –∏—Ö –Ω–∞ –ø–æ–∫—É–ø–∫–∏.`);
      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', Markup.inlineKeyboard([
        [Markup.button.callback('–ú–µ—Ä—á', 'cat_merch'), Markup.button.callback('–ü–ª—é—à–∫–∏', 'cat_plush')]
      ]));
    } else {
      await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      sess.stage = 'awaiting_email';
    }

    setAuthorized(ctx.from.id);

    return;
  }

  // === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "üõí –ö–æ—Ä–∑–∏–Ω–∞" ===
  if (/^üõí –ö–æ—Ä–∑–∏–Ω–∞/.test(text)) {
   const sess = sessions.get(user_id);
    if (sess && sess.message_id) {
      try {
        await ctx.deleteMessage(sess.message_id);
      } catch (e) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', e);
      }
    }

    const { data } = await supabase
      .from('cart_items')
      .select('quantity, products(name)')
      .eq('user_id', String(user_id));

    if (!data || !data.length) {
      return ctx.reply('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
    }

    const cartText = data.map((item: any, idx: number) =>
      `${idx + 1}. ${item.products.name} √ó${item.quantity}`
    ).join('\n');

    await ctx.reply(`üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n${cartText}`, Markup.inlineKeyboard([
      [Markup.button.callback('–ó–∞–∫–∞–∑–∞—Ç—å ‚úÖ', 'order')],
      [Markup.button.callback('üßπ –û—á–∏—Å—Ç–∏—Ç—å', 'clear_cart')]
    ]));
    return;
  }

  // === –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º ===
  console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${ctx.from.username || ctx.from.first_name}: ${text}`);
});


// --- –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ö–æ—Ä–∑–∏–Ω–∞ (n) ---
async function setCartKeyboard(ctx: any, user_id: string, notify: boolean = false) {
  const { data } = await supabase.from('cart_items').select('quantity').eq('user_id', user_id);
  const total = (data ?? []).reduce((sum, item) => sum + item.quantity, 0);

  if (!notify) {
    return;
  }

  await ctx.telegram.sendMessage(ctx.chat.id, `üõí –ö–æ—Ä–∑–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (${total})`, {
    reply_markup: {
      keyboard: [[{ text: `üõí –ö–æ—Ä–∑–∏–Ω–∞ (${total})` }]],
      resize_keyboard: true,
      one_time_keyboard: false
    }
  });

}

// --- –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
bot.action(/cat_(.+)/, async ctx => {
  await ctx.deleteMessage();
  if (!(await checkAuthorize(ctx))) return;

  const user_id = ctx.from.id;
  const cat = ctx.match[1] as 'merch' | 'plush';

  const { data: products } = await supabase.from('products').select('*');
  if (!products || products.length === 0) return ctx.reply('–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤');

  const sess = sessions.get(user_id) ?? { index: 0, products: [] };
  sess.category = cat;
  sess.index = 0;
  sess.products = products;  

  sessions.set(user_id, sess); // <--- –Ω–µ —É–¥–∞–ª—è–π —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è!

  const firstProduct = products[0];
  const caption = `${firstProduct.name} | ${firstProduct.size}\n–¶–µ–Ω–∞: ${firstProduct.price}‚ÇΩ\n–û—Å—Ç–∞–ª–æ—Å—å: ${firstProduct.remains}`;

  const message = await ctx.replyWithPhoto(firstProduct.image_url ?? '', {
    caption,
    reply_markup: getProductKeyboard(firstProduct.id, 0, products.length, false)
  });

  sess.message_id = message.message_id;
});


// --- –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –ø–æ–¥ —Ç–æ–≤–∞—Ä–æ–º ---
function getProductKeyboard(productId: number, index: number, total: number, isInCart: boolean) {
  return Markup.inlineKeyboard([
    [
      Markup.button.callback('‚¨ÖÔ∏è', 'prev'),
      Markup.button.callback(`${index + 1}/${total}`, 'noop'),
      Markup.button.callback('‚û°Ô∏è', 'next')
    ],
    [isInCart
      ? Markup.button.callback('–£–¥–∞–ª–∏—Ç—å üóëÔ∏è', `remove_${productId}`)
      : Markup.button.callback('–í—ã–±—Ä–∞—Ç—å üéØ', `select_${productId}`)],
    [Markup.button.callback('–ù–∞–∑–∞–¥ ‚óÄÔ∏è', 'back')]
  ]).reply_markup;
}

// --- –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ ---
async function updateProductView(ctx: Context, sess: Session, forceInCart?: boolean) {
  const product = sess.products[sess.index];
  if (!product) {
    await ctx.reply('–ù–∞–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑–º–µ–Ω–∏–ª—Å—è, –≤—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑:', Markup.inlineKeyboard([
      [Markup.button.callback('–ú–µ—Ä—á', 'cat_merch'), Markup.button.callback('–ü–ª—é—à–∫–∏', 'cat_plush')]
    ]));

    return;
  }
  const caption = `${product.name} | ${product.size}\n–¶–µ–Ω–∞: ${product.price}‚ÇΩ\n–û—Å—Ç–∞–ª–æ—Å—å: ${product.remains}`;
  if (!sess.message_id) return;

  const { data: cartItems } = await supabase
    .from('cart_items')
    .select('*')
    .eq('user_id', String(ctx.from?.id))
    .eq('product_id', product.id);

  const isInCart = forceInCart ?? !!(cartItems && cartItems.length);

  await ctx.telegram.editMessageMedia(
    ctx.chat!.id,
    sess.message_id,
    undefined,
    {
      type: 'photo',
      media: product.image_url ?? '',
      caption
    },
    {
      reply_markup: getProductKeyboard(product.id, sess.index, sess.products.length, isInCart)
    }
  );
}

// --- –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ ---
bot.action(/prev|next|back/, async ctx => {
  const sess = sessions.get(ctx.from.id);
  if (!sess) return;

  if (ctx.match[0] === 'prev') sess.index = Math.max(0, sess.index - 1);
  if (ctx.match[0] === 'next') sess.index = Math.min(sess.products.length - 1, sess.index + 1);
  if (ctx.match[0] === 'back') {
    sess.message_id = undefined;
    await ctx.deleteMessage();
    return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', Markup.inlineKeyboard([
      [Markup.button.callback('–ú–µ—Ä—á', 'cat_merch'), Markup.button.callback('–ü–ª—é—à–∫–∏', 'cat_plush')]
    ]));
  }

  await updateProductView(ctx, sess);
});

// --- –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É ---
bot.action(/select_(\d+)/, async ctx => {
  const user_id = String(ctx.from.id);
  const product_id = Number(ctx.match[1]);

  const { data } = await supabase.from('cart_items').select('*')
    .eq('user_id', user_id)
    .eq('product_id', product_id);

  if (data && data.length) {
    await supabase.from('cart_items').update({ quantity: data[0].quantity + 1 })
      .eq('user_id', user_id)
      .eq('product_id', product_id);
  } else {
    await supabase.from('cart_items').insert({ user_id, product_id, quantity: 1 });
  }

  await updateProductView(ctx, sessions.get(ctx.from.id)!, true);
  await setCartKeyboard(ctx, user_id, true);
});

// --- —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã ---
bot.action(/remove_(\d+)/, async ctx => {
  const user_id = String(ctx.from.id);
  const product_id = Number(ctx.match[1]);

  await supabase.from('cart_items').delete()
    .eq('user_id', user_id)
    .eq('product_id', product_id);

  await updateProductView(ctx, sessions.get(ctx.from.id)!, false);
  await setCartKeyboard(ctx, user_id, true);
});

// --- –æ—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã ---
bot.action('clear_cart', async ctx => {
  const user_id = String(ctx.from.id);
  await supabase.from('cart_items').delete().eq('user_id', user_id);

  await setCartKeyboard(ctx, user_id, true);
  await ctx.answerCbQuery('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞');
  await ctx.editMessageText('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞ ‚úÖ');

  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', Markup.inlineKeyboard([
    [Markup.button.callback('–ú–µ—Ä—á', 'cat_merch'), Markup.button.callback('–ü–ª—é—à–∫–∏', 'cat_plush')]
  ]));
});

// --- –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ---
bot.action('order', async ctx => {
  await ctx.answerCbQuery('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–∞...');

  const user_id = String(ctx.from.id);
  const sess = sessions.get(ctx.from.id);  

  if (!sess?.userId) {
    return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.');
  }

  const { data } = await supabase
    .from('cart_items')
    .select('quantity, products(name, price)')
    .eq('user_id', user_id);

  if (!data || !data.length) return ctx.reply('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');

  const totalCost = data.reduce((sum, item: any) => sum + item.quantity * item.products.price, 0);

  const userPoints = await fetchUserPoints(sess.userId);

  if (!userPoints || userPoints < totalCost) {
    return ctx.reply(`–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞. –ù—É–∂–Ω–æ ${totalCost}, —É –≤–∞—Å ${userPoints ?? 0}.`);
  }

  const success = await withdrawUserPoints(sess.userId, totalCost, '–°–ø–∏—Å–∞–Ω–∏–µ –∑–∞ –∑–∞–∫–∞–∑ –≤ Telegram-–±–æ—Ç–µ');

  if (!success) {
    return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
  }

  // –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
  const orderText = data.map((i: any) =>
    `${i.products.name} √ó${i.quantity}`
  ).join('\n');

  await ctx.telegram.sendMessage(Number(process.env.ADMIN_ID!), `üõç –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç ${ctx.from.first_name}:\n${orderText}`);

  // –æ—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
  await supabase.from('cart_items').delete().eq('user_id', user_id);

  await ctx.reply(`‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ ${totalCost} –±–∞–ª–ª–æ–≤ —Å–ø–∏—Å–∞–Ω–æ.\n–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å ${userPoints} –±–∞–ª–ª–æ–≤.`);
  await setCartKeyboard(ctx, user_id, true);

  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', Markup.inlineKeyboard([
    [Markup.button.callback('–ú–µ—Ä—á', 'cat_merch'), Markup.button.callback('–ü–ª—é—à–∫–∏', 'cat_plush')]
  ]));
});


// === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é ===
(async () => {
  await bot.telegram.setMyCommands([
    { command: 'start', description: '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' },
    { command: 'account', description: '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç' }
  ]);

// === –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ ===
  if (mode === 'local') {
    bot.launch();
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling');

    process.once('SIGINT', () => bot.stop('SIGINT'));
    process.once('SIGTERM', () => bot.stop('SIGTERM'));
  }
})();

